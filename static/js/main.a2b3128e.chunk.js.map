{"version":3,"sources":["common/components/ControlPanel/ControlPanel.module.css","common/components/Chart/Chart.tsx","common/customHooks/useChartsData.ts","common/constants.ts","components/DailyChart/state/activeEntitiesAtom.ts","components/DailyChart/state/cachedEntitiesAtom.ts","components/DailyChart/state/dateRangeAtom.ts","components/DailyChart/state/normalizedData.ts","common/components/ControlPanel/getControlPanel.tsx","common/components/getCheckboxGroup.tsx","common/components/getDateSelector.tsx","components/DailyChart/DailyChart.tsx","components/IntradayChart/state/activeEntitiesAtom.ts","components/IntradayChart/state/cachedEntitiesAtom.ts","components/IntradayChart/state/dateRangeAtom.ts","components/IntradayChart/state/normalizedData.ts","components/IntradayChart/IntradayChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","colorPalette","throttleData","data","limit","length","everyIndex","Math","floor","filter","_i","id","Chart","state","visibleData","props","refAreaLeft","refAreaRight","top","getAxisYDomain","refData","lineKeys","Infinity","forEach","d","key","value","Number","zoom","xAxisKey","fromIndex","findIndex","entry","toIndex","slice","setState","prevProps","this","dateLimit","calculateVisibleDataAndLimits","precision","date","Date","setMonth","getMonth","setHours","getHours","LineChart","width","height","onMouseDown","e","activeLabel","onMouseMove","onMouseUp","CartesianGrid","fill","strokeDasharray","XAxis","allowDataOverflow","dataKey","type","YAxis","domain","yAxisId","Tooltip","map","Line","stroke","animationDuration","ReferenceArea","x1","x2","strokeOpacity","React","Component","refreshData","func","setData","setIsLoading","cachedEntities","setCachedEntities","normalizedData","setNormalizedData","entityToFetch","fetch","then","r","json","series","daily","ndCopy","Object","keys","concat","sort","a","b","getTime","notification","error","message","useChartsData","activeEntities","normalizedDataAtom","cachedEntitiesAtom","useState","isLoading","useRecoilState","refresh","useEffect","find","entity","includes","intervalId","setInterval","clearInterval","activeEntitiesAtom","atom","default","dateRangeAtom","getControlPanel","entityAtom","dateAtom","recoilState","EntitySelector","disabled","options","setValue","Group","onChange","selectedItems","DateSelector","buttonStyle","target","label","Button","getDateSelector","showDateRange","entities","dateOptions","className","styles","controlPanel","ControlPanel","DailyChart","useRecoilValue","IntradayChart","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2b3128e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanel\":\"ControlPanel_controlPanel__3iqIv\"};","import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ReferenceArea,\n} from \"recharts\";\nimport { State, Props, dataItem } from \"./types\";\n\nconst colorPalette = [\"#364f6b\", \"#fc5185\", \"#91091e\", \"#007965\"];\n\nconst throttleData = (data: dataItem[], limit = 100) => {\n  if (data.length < limit) {\n    return data;\n  }\n  const everyIndex = Math.floor(data.length / limit);\n  return data.filter((_i, id) => id % everyIndex === 0);\n};\nexport class Chart extends React.Component<Props, State> {\n  state = {\n    visibleData: throttleData(this.props.data),\n    refAreaLeft: \"\",\n    refAreaRight: \"\",\n    top: \"dataMax\",\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.data !== prevProps.data ||\n      this.props.dateLimit !== prevProps.dateLimit\n    ) {\n      this.setState(this.calculateVisibleDataAndLimits());\n    }\n    if (this.props.lineKeys !== prevProps.lineKeys) {\n      const top = this.getAxisYDomain(this.state.visibleData);\n      this.setState({ top });\n    }\n  }\n\n  calculateVisibleDataAndLimits() {\n    const { dateLimit, precision } = this.props;\n    let { data } = this.props;\n    if (dateLimit) {\n      const date = new Date(this.props.data[this.props.data.length - 1].date);\n      if (precision === \"month\") {\n        date.setMonth(date.getMonth() - dateLimit);\n      }\n      if (precision === \"hour\") {\n        date.setHours(date.getHours() - dateLimit);\n      }\n      data = this.props.data.filter((d) => new Date(d.date) > date);\n    }\n\n    const visibleData = throttleData(data);\n    const top = this.getAxisYDomain(visibleData);\n    return { visibleData, top, refAreaLeft: \"\", refAreaRight: \"\" };\n  }\n\n  getAxisYDomain = (refData: dataItem[]) => {\n    const { lineKeys } = this.props;\n    let top = -Infinity;\n    refData.forEach((d) => {\n      lineKeys.forEach((key) => {\n        const value = Number(d[key]);\n        if (value > top) {\n          top = value;\n        }\n      });\n    });\n\n    return (top + 20) | 0;\n  };\n\n  zoom = () => {\n    let { refAreaLeft, refAreaRight } = this.state;\n    const { xAxisKey, data } = this.props;\n\n    if (refAreaLeft === refAreaRight || refAreaRight === \"\") {\n      this.setState(() => ({\n        refAreaLeft: \"\",\n        refAreaRight: \"\",\n      }));\n      return;\n    }\n\n    // xAxis domain\n    if (refAreaLeft > refAreaRight) {\n      [refAreaLeft, refAreaRight] = [refAreaRight, refAreaLeft];\n    }\n\n    // yAxis domain\n    // FIXME: fromIndex < toIndex\n    const fromIndex =\n      data.findIndex((entry) => entry[xAxisKey] === refAreaLeft) - 1;\n    const toIndex = data.findIndex((entry) => entry[xAxisKey] === refAreaRight);\n    const refData = data.slice(fromIndex, toIndex);\n    const top = this.getAxisYDomain(refData);\n\n    this.setState(() => ({\n      visibleData: throttleData(refData),\n      refAreaLeft: \"\",\n      refAreaRight: \"\",\n      top,\n    }));\n  };\n\n  render() {\n    const { refAreaLeft, refAreaRight, top, visibleData } = this.state;\n    const { xAxisKey, lineKeys } = this.props;\n\n    return (\n      visibleData.length > 0 &&\n      lineKeys.length > 0 && (\n        <LineChart\n          width={800}\n          height={400}\n          data={visibleData}\n          onMouseDown={(e: { activeLabel: string }) =>\n            this.setState({ refAreaLeft: e.activeLabel })\n          }\n          onMouseMove={(e: { activeLabel: string }) =>\n            this.state.refAreaLeft &&\n            this.setState({ refAreaRight: e.activeLabel })\n          }\n          onMouseUp={this.zoom}\n        >\n          <CartesianGrid fill=\"#f5f5f5\" strokeDasharray=\"3 3\" />\n          <XAxis allowDataOverflow dataKey={xAxisKey} type=\"category\" />\n          <YAxis\n            allowDataOverflow\n            domain={[0, top]}\n            type=\"number\"\n            yAxisId=\"1\"\n          />\n          <Tooltip />\n          {lineKeys.map((key, id) => (\n            <Line\n              key={key}\n              yAxisId=\"1\"\n              type=\"natural\"\n              dataKey={key}\n              stroke={colorPalette[id]}\n              animationDuration={300}\n            />\n          ))}\n\n          {refAreaLeft && refAreaRight ? (\n            <ReferenceArea\n              yAxisId=\"1\"\n              x1={refAreaLeft}\n              x2={refAreaRight}\n              strokeOpacity={0.3}\n            />\n          ) : null}\n        </LineChart>\n      )\n    );\n  }\n}\n","import { useEffect, useState } from \"react\";\nimport { notification } from \"antd\";\nimport { RecoilState, SetterOrUpdater, useRecoilState } from \"recoil\";\nimport { dataItem } from \"../components/Chart/types\";\nimport { apiKey } from \"../constants\";\n\ntype normalized = {\n  [key: string]: {\n    [key: string]: string | number;\n  };\n};\n\nconst normalizedDataToArray = (data: normalized): dataItem[] =>\n  Object.keys(data)\n    .map((date) => {\n      return {\n        date,\n        ...data[date],\n      };\n    })\n    // keys are sorted in a wrong order\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\nconst refreshData = (\n  func: string,\n  dataKey: string,\n  setData: React.Dispatch<dataItem[]>,\n  setIsLoading: React.Dispatch<boolean>,\n  [cachedEntities, setCachedEntities]: [string[], SetterOrUpdater<string[]>],\n  [normalizedData, setNormalizedData]: [normalized, SetterOrUpdater<normalized>]\n) => (entityToFetch: string) => {\n  setIsLoading(true);\n  return fetch(\n    `https://www.alphavantage.co/query?function=${func}&symbol=${entityToFetch}&apikey=${apiKey}`\n  )\n    .then((r) => r.json())\n    .then((series) => {\n      const daily = series[dataKey];\n      if (!daily) {\n        notification.error({\n          message: `Cannot fetch data for ${entityToFetch}`,\n        });\n        return;\n      }\n      const ndCopy = { ...normalizedData };\n      Object.keys(daily).forEach((date) => {\n        const value = Number(daily[date][\"4. close\"]);\n        ndCopy[date] = {\n          ...(ndCopy[date] || {}),\n          [entityToFetch]: value,\n        };\n      });\n      setNormalizedData(ndCopy);\n      setCachedEntities(cachedEntities.concat(entityToFetch));\n      setData(normalizedDataToArray(ndCopy));\n    })\n    .then(() => {\n      setIsLoading(false);\n    });\n};\n\nexport const useChartsData = (\n  func: string,\n  dataKey: string,\n  activeEntities: string[],\n  normalizedDataAtom: RecoilState<normalized>,\n  cachedEntitiesAtom: RecoilState<string[]>\n): [dataItem[], boolean] => {\n  const [data, setData] = useState<dataItem[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [normalizedData, setNormalizedData] = useRecoilState(\n    normalizedDataAtom\n  );\n  const [cachedEntities, setCachedEntities] = useRecoilState(\n    cachedEntitiesAtom\n  );\n\n  const refresh = refreshData(\n    func,\n    dataKey,\n    setData,\n    setIsLoading,\n    [cachedEntities, setCachedEntities],\n    [normalizedData, setNormalizedData]\n  );\n\n  useEffect(() => {\n    // We don't request what was already requested\n    const entityToFetch = activeEntities.find(\n      (entity) => !cachedEntities.includes(entity)\n    );\n    if (!entityToFetch) {\n      return;\n    }\n\n    refresh(entityToFetch);\n  }, [activeEntities]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // refresh active data every 15 mins\n  // TODO: react-query could be the best solution\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      activeEntities.forEach(refresh);\n    }, 15 * 60 * 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [activeEntities]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return [data, isLoading];\n};\n","export const apiKey = \"0WGUMXH2681X2FPO\";\n","import { atom } from \"recoil\";\n\nexport const activeEntitiesAtom = atom<string[]>({\n  key: \"dailyChart/activeEntities\",\n  default: [],\n});\n","import { atom } from \"recoil\";\n\nexport const cachedEntitiesAtom = atom<string[]>({\n  key: \"dailyChart/cachedEntities\",\n  default: [],\n});\n","import { atom } from \"recoil\";\n\nexport const dateRangeAtom = atom<number>({\n  key: \"dailyChart/dateRange\",\n  default: 1,\n});\n","import { atom } from \"recoil\";\n\ntype normalized = {\n  [key: string]: {\n    [key: string]: string | number;\n  };\n};\n\nexport const normalizedDataAtom = atom<normalized>({\n  key: \"dailyChart/normalizedData\",\n  default: {},\n});\n","import React from \"react\";\nimport { RecoilState } from \"recoil\";\nimport { getCheckboxGroup } from \"../getCheckboxGroup\";\nimport { getDateSelector } from \"../getDateSelector\";\nimport styles from \"./ControlPanel.module.css\";\n\ntype Props = {\n  disabled?: boolean;\n  showDateRange?: boolean;\n  entities: string[];\n  dateOptions: Array<{ label: string; value: number }>;\n};\n\nexport const getControlPanel = (\n  entityAtom: RecoilState<string[]>,\n  dateAtom: RecoilState<number>\n): React.FC<Props> => {\n  const EntitySelector = getCheckboxGroup(entityAtom);\n  const DateSelector = getDateSelector(dateAtom);\n\n  return ({ disabled, showDateRange, entities, dateOptions }) => {\n    return (\n      <section className={styles.controlPanel}>\n        <EntitySelector options={entities} disabled={disabled} />\n        {showDateRange && (\n          <DateSelector options={dateOptions} disabled={disabled} />\n        )}\n      </section>\n    );\n  };\n};\n","import React from \"react\";\nimport { Checkbox } from \"antd\";\nimport { RecoilState, useRecoilState } from \"recoil\";\n\ntype Props = {\n  disabled?: boolean;\n  options: string[];\n};\n\nexport const getCheckboxGroup = (\n  recoilState: RecoilState<string[]>\n): React.FC<Props> => ({ disabled, options }) => {\n  const [value, setValue] = useRecoilState(recoilState);\n\n  return (\n    <Checkbox.Group\n      options={options}\n      disabled={disabled}\n      value={value}\n      onChange={(selectedItems) => {\n        setValue(selectedItems as string[]);\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { Radio } from \"antd\";\nimport { RecoilState, useRecoilState } from \"recoil\";\n\ntype Props = {\n  disabled?: boolean;\n  options: Array<{ label: string; value: number }>;\n};\n\nexport const getDateSelector = (\n  recoilState: RecoilState<number>\n): React.FC<Props> => ({ disabled, options }) => {\n  const [value, setValue] = useRecoilState(recoilState);\n\n  return (\n    <Radio.Group\n      disabled={disabled}\n      buttonStyle=\"solid\"\n      onChange={(e) => {\n        setValue(e.target.value);\n      }}\n      value={value}\n    >\n      {options.map(({ value, label }) => (\n        <Radio.Button key={value} value={value}>\n          {label}\n        </Radio.Button>\n      ))}\n    </Radio.Group>\n  );\n};\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { Chart } from \"../../common/components/Chart\";\nimport \"antd/dist/antd.css\";\nimport { useChartsData } from \"../../common/customHooks/useChartsData\";\nimport {\n  activeEntitiesAtom,\n  cachedEntitiesAtom,\n  dateRangeAtom,\n  normalizedDataAtom,\n} from \"./state\";\nimport { getControlPanel } from \"../../common/components/ControlPanel\";\n\nconst ControlPanel = getControlPanel(activeEntitiesAtom, dateRangeAtom);\nconst entities = [\"IBM\", \"TSCO.LON\", \"TESO\", \"BABA\"];\nconst dateOptions = [\n  { value: 1, label: \"Last month\" },\n  { value: 12, label: \"Last year\" },\n  { value: 36, label: \"3 years\" },\n  { value: 0, label: \"All data\" },\n];\n\nexport const DailyChart: React.FC = () => {\n  const activeEntities = useRecoilValue(activeEntitiesAtom);\n  const dateLimit = useRecoilValue(dateRangeAtom);\n  const [data, isLoading] = useChartsData(\n    \"TIME_SERIES_DAILY&outputsize=full\",\n    \"Time Series (Daily)\",\n    activeEntities,\n    normalizedDataAtom,\n    cachedEntitiesAtom\n  );\n\n  return (\n    <section>\n      <h2>Daily Chart</h2>\n      <ControlPanel\n        dateOptions={dateOptions}\n        entities={entities}\n        disabled={isLoading}\n        showDateRange={data.length > 0}\n      />\n      <p>\n        For better performance the chart always shows{\" \"}\n        <b>not more than 100 values</b> per line at once. Real data size is{\" \"}\n        <b>~{data.length}</b> points (possibly per entity).\n      </p>\n      <p>\n        It also <b>caches</b> already fetched data and refetches it once per 15\n        minutes.\n      </p>\n      <Chart\n        precision=\"month\"\n        data={data}\n        dateLimit={dateLimit}\n        xAxisKey=\"date\"\n        lineKeys={activeEntities}\n      />\n    </section>\n  );\n};\n","import { atom } from \"recoil\";\n\nexport const activeEntitiesAtom = atom<string[]>({\n  key: \"intradayChart/activeEntities\",\n  default: [],\n});\n","import { atom } from \"recoil\";\n\nexport const cachedEntitiesAtom = atom<string[]>({\n  key: \"intradayChart/cachedEntities\",\n  default: [],\n});\n","import { atom } from \"recoil\";\n\nexport const dateRangeAtom = atom<number>({\n  key: \"intradayChart/dateRange\",\n  default: 1,\n});\n","import { atom } from \"recoil\";\n\nexport type normalized = {\n  [key: string]: {\n    [key: string]: string | number;\n  };\n};\n\nexport const normalizedDataAtom = atom<normalized>({\n  key: \"intradayChart/normalizedData\",\n  default: {},\n});\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { Chart } from \"../../common/components/Chart\";\nimport \"antd/dist/antd.css\";\nimport { useChartsData } from \"../../common/customHooks/useChartsData\";\nimport {\n  activeEntitiesAtom,\n  normalizedDataAtom,\n  dateRangeAtom,\n  cachedEntitiesAtom,\n} from \"./state\";\nimport { getControlPanel } from \"../../common/components/ControlPanel\";\n\nconst ControlPanel = getControlPanel(activeEntitiesAtom, dateRangeAtom);\nconst entities = [\"IBM\", \"BABA\"];\nconst dateOptions = [\n  { value: 1, label: \"1 hour\" },\n  { value: 3, label: \"3 hours\" },\n  { value: 6, label: \"6 hours\" },\n  { value: 0, label: \"All data\" },\n];\n\nexport const IntradayChart: React.FC = () => {\n  const activeEntities = useRecoilValue(activeEntitiesAtom);\n  const dateLimit = useRecoilValue(dateRangeAtom);\n  const [data, isLoading] = useChartsData(\n    \"TIME_SERIES_INTRADAY&interval=5min\",\n    \"Time Series (5min)\",\n    activeEntities,\n    normalizedDataAtom,\n    cachedEntitiesAtom\n  );\n\n  return (\n    <section>\n      <h2>Intraday Chart</h2>\n      <ControlPanel\n        dateOptions={dateOptions}\n        entities={entities}\n        disabled={isLoading}\n        showDateRange={data.length > 0}\n      />\n      <p>\n        For better performance the chart always shows{\" \"}\n        <b>not more than 100 values</b> per line at once. Real data size is{\" \"}\n        <b>~{data.length}</b> points (possibly per entity).\n      </p>\n      <p>\n        It also <b>caches</b> already fetched data and refetches it once per 15\n        minutes.\n      </p>\n      <Chart\n        precision=\"hour\"\n        data={data}\n        dateLimit={dateLimit}\n        xAxisKey=\"date\"\n        lineKeys={activeEntities}\n      />\n    </section>\n  );\n};\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { DailyChart } from \"./components/DailyChart\";\nimport { IntradayChart } from \"./components/IntradayChart\";\n\nfunction App() {\n  return (\n    <section>\n      <DailyChart />\n      <hr />\n      <IntradayChart />\n    </section>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}